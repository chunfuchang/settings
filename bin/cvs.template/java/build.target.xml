<!-- build.target.xml
	$Id: build.target.xml,v 1.2 2006/02/17 06:12:59 tomyeh Exp $
	Purpose:
		The target definitions for build.xml
	Description:
		The target definitions are put in a separate file for two reasons:
		1) it is shared by two projects
		2) reduce the complexity of build.xml
	History:
		Wed Aug 21 18:01:44  2002, Created by tomyeh@potix.com

Copyright (C) 2002-2006 Potix Corporation. All Rights Reserved.
-->

<!-- ======= -->
<!-- CODEGEN -->
<!-- ======= -->
<target name="codegen.mesg" depends="config.build" if="src.mesg.dir.exist">
	<!-- generate MxxConst.java -->
	<exec executable="bash" dir="." failonerror="true">
		<arg value="${bin.dir}/genprop"/>
		<arg value="-x"/>
		<arg value="${src.mesg.dir}"/>
		<arg value="${codegen.dir}"/>
	</exec>
</target>

<!-- ======= -->
<!-- COMPILE -->
<!-- ======= -->
<target name="compile" depends="codegen.mesg" if="compile.required">
	<mkdir dir="${out.dir}"/>
	<javac srcdir="${src.dir}:${codegen.dir}" destdir="${out.dir}"
	 debug="${debug}" optimize="${optimize}" encoding="UTF-8"
	 deprecation="${deprecation}" source="${source.version}"/>
</target>

<!-- ====== -->
<!-- DEPLOY -->
<!-- ====== -->

<target name="deploy.export" depends="config.build" if="src.export.dir.exist">
	<copy todir="${dist.export.dir}" preservelastmodified="yes">
		<fileset dir="${src.export.dir}" excludes="**/CVS/**"/>
	</copy>
</target>

<target name="deploy.lib" depends="config.build" if="deploy.lib.required">
	<copy todir="${dist.lib.dir}" preservelastmodified="yes">
		<fileset dir="${out.dir}" includes="${xar.name}"/>
	</copy>
</target>

<target name="stop.service" depends="config.build"
if="start.service.required">
	<exec executable="net" dir="." failonerror="false">
		<arg value="stop"/>
		<arg value="${start.service}"/>
	</exec>
</target>
<target name="start.service" depends="config.build"
if="start.service.required">
	<exec executable="net" dir="." failonerror="false">
		<arg value="start"/>
		<arg value="${start.service}"/>
	</exec>
</target>
<target name="deploy.tomcat.files" depends="config.build"
if="deploy.tomcat.required">
	<exec executable="bash" dir="." failonerror="true">
		<arg value="${bin.dir}/deploy.unzip.war"/>
		<arg value="${dist.lib.dir}"/>
		<arg value="${tomcat.webapps.dir}"/>
		<arg value="${ear.libs}"/>
		<arg value="${root.context}/ROOT"/>
	</exec>

	<copy todir="${tomcat.lib.dir}" preservelastmodified="yes">
		<fileset dir="${dist.lib.dir}" includes="${server.libs}"/>
		<fileset dir="${dist.lib.ext.dir}" includes="${server.libs}"/>
	</copy>

	<copy tofile="${tomcat.conf.dir}/i3-log.conf" file="${dist.conf.dir}/i3-log.conf.local"
	preservelastmodified="yes" failonerror="false"/>
</target>
<target name="deploy.tomcat"
depends="config.build, stop.service, deploy.tomcat.files, start.service"
if="deploy.tomcat.required">
</target>

<target name="deploy.jboss.intact" depends="config.build"
if="deploy.jboss.intact.required">
	<!-- deploy to server intact -->
	<copy todir="${jboss.deploy1.dir}" preservelastmodified="yes">
		<fileset dir="${out.dir}" includes="${xar.name}"/>
	</copy>
</target>
<target name="deploy.jboss.unzip" depends="config.build"
if="deploy.jboss.unzip.required">
	<!-- deploy to server by unzip -->
	<exec executable="bash" dir="." failonerror="true">
		<arg value="${bin.dir}/deploy.unzip"/>
		<arg value="${out.dir}/${xar.name}"/>
		<arg value="${jboss.deploy1.dir}"/>
		<arg value="${deploy.unzip.list}"/>
	</exec>
</target>

<target name="deploy.jboss"
depends="config.build, deploy.jboss.unzip, deploy.jboss.intact"
if="deploy.jboss.required">
	<mkdir dir="${dist.conf.dir}"/>
	<mkdir dir="${dist.conf.dir}/install"/>
	<mkdir dir="${dist.conf.dir}/upgrade"/>
	<mkdir dir="${dist.conf.dir}/link"/>
	<mkdir dir="${dist.conf.dir}/www"/>
	<mkdir dir="${dist.deploy.dir}"/>

	<!-- deploy configuration files -->
	<mkdir dir="${jboss.app.dir}/custom"/>

	<copy tofile="${jboss.conf.dir}/i3-log.conf" file="${dist.conf.dir}/i3-log.conf.local"
	preservelastmodified="yes" failonerror="false"/>

	<copy todir="${jboss.conf.dir}" preservelastmodified="yes">
		<fileset dir="${dist.conf.dir}"
		includes="*-service.xml,i3-ks,*-policy.xml,*.properties"/>
	</copy>
	<copy todir="${jboss.app.conf.dir}" preservelastmodified="yes">
		<fileset dir="${dist.conf.dir}"
		includes="i3-*.xml" excludes="*-service.xml,i3-ks"/>
	</copy>

	<copy todir="${jboss.app.conf.dir}/install" preservelastmodified="yes">
		<fileset dir="${dist.conf.dir}/install" includes="**" excludes="**/CVS/**"/>
	</copy>
	<copy todir="${jboss.app.conf.dir}/upgrade" preservelastmodified="yes">
		<fileset dir="${dist.conf.dir}/upgrade" includes="**" excludes="**/CVS/**"/>
	</copy>

	<copy todir="${jboss.app.domain.conf.dir}/link" preservelastmodified="yes">
		<fileset dir="${dist.conf.dir}/link" includes="**" excludes="**/CVS/**"/>
	</copy>
	<copy todir="${jboss.app.domain.template.conf.dir}/link" preservelastmodified="yes" failonerror="false">
		<fileset dir="${dist.conf.dir}/link" includes="**" excludes="**/CVS/**"/>
	</copy>
	<copy todir="${jboss.www.dir}" preservelastmodified="yes" failonerror="false">
		<fileset dir="${dist.conf.dir}/www" includes="**" excludes="**/CVS/**"/>
	</copy>

	<!-- deploy external library -->
	<copy todir="${jboss.lib.dir}" preservelastmodified="yes">
		<fileset dir="${dist.lib.ext.dir}" includes="${server.libs}"/>
	</copy>
	<copy todir="${jboss.lib.dir}" preservelastmodified="yes">
		<fileset dir="${dist.lib.dir}" includes="${server.libs}"/>
	</copy>

	<!-- db jca configurations -->
	<copy todir="${jboss.deploy.dir}" preservelastmodified="yes" failonerror="false">
		<fileset dir="${dist.deploy.dir}" includes="*-ds.xml"/>
	</copy>
</target>

<target name="deploy"
depends="deploy.export, deploy.lib, deploy.tomcat, deploy.jboss">
</target>

<!-- ===== -->
<!-- BUILD -->
<!-- ===== -->
<target name="build.jar" depends="compile, copy.web.jar" if="build.jar.required">
	<mkdir dir="${src.archive.dir}"/>
	<mkdir dir="${codegen.archive.dir}"/>

	<exec executable="bash" dir="." failonerror="true">
		<arg value="${bin.dir}/zipjs"/>
		<arg value="${dist.lib.ext.dir}/custom_rhino.jar"/>
		<arg value="${src.archive.dir}/${zipjs}"/>
		<arg value="${codegen.archive.dir}/${zipjs}"/>
	</exec>

	<jar jarfile="${out.dir}/${jar.name}" manifest="${manifest.mf}">
		<fileset dir="${out.dir}" excludes="${exclude.list}"/>
		<fileset dir="${src.archive.dir}" includes="**"
		 excludes="META-INF/MANIFEST.MF, **/CVS/**, ${zipjs}/**"/>
		<fileset dir="${codegen.archive.dir}" includes="**"
		 excludes="META-INF/MANIFEST.MF"/>
	</jar>
</target>
<!-- copy WEB-relevant resource  to jar (into codegen.archive.web.dir) -->
<target name="copy.web.jar" depends="deploy.export" if="copy.web.jar.required">
	<mkdir dir="${codegen.archive.web.dir}"/>
	<copy todir="${codegen.archive.web.dir}" preservelastmodified="yes"
	failonerror="false">
		<fileset dir="${dist.export.dir}" includes="${import.libs}"/>
		<fileset dir="${dist.lib.ext.dir}" includes="${import.libs}"/>
		<fileset dir="${src.export.dir}" includes="${import.libs}"/>
	</copy>
</target>

<target name="build.war" if="build.war.required">
	<mkdir dir="${out.dir}"/>
	<property name="src.web.xml" value="${src.archive.dir}/WEB-INF/web.xml"/>
		<!-- to let other targets have a chance to override it -->
	<war warfile="${out.dir}/${war.name}" webxml="${src.web.xml}"
	manifest="${manifest.mf}">
		<fileset dir="${src.archive.dir}" includes="**"
		 excludes="WEB-INF/web.xml, META-INF/MANIFEST.MF, **/CVS/**, **/_notes/**, **/_raw/**"/>
		<fileset dir="${dist.export.dir}" includes="${import.libs}"/>
		<fileset dir="${dist.lib.ext.dir}" includes="${import.libs}"/>

		<lib dir="${dist.lib.ext.dir}" includes="${war.libs}"/>
		<lib dir="${dist.lib.dir}" includes="${war.libs}"/>
		<classes dir="${out.dir}" excludes="${exclude.list}"/>
	</war>
</target>

<target name="build.ear" depends="config.build" if="build.ear.required">
	<mkdir dir="${out.app.dir}"/>

	<jar jarfile="${out.app.dir}/i3app.jar" manifest="${manifest.mf}">
		<fileset dir="${src.archive.dir}" includes="META-INF/i3*, metainfo/**"
		 excludes="META-INF/MANIFEST.MF, **/CVS/**"/>
		 <!-- don't include jboss*xml and others -->
	</jar>

	<!-- copy the libraries listed in ear.libs -->
	<copy todir="${out.app.dir}" preservelastmodified="yes">
		<fileset dir="${dist.lib.dir}" includes="${ear.libs}"/>
		<!-- exclude it to make portable able to clean all and rebuild
		<fileset dir="${dist.lib.ext.dir}" includes="${ear.libs}"/>
		-->
	</copy>

	<exec executable="bash" dir="." failonerror="true">
		<arg value="${bin.dir}/prefixapp"/>
		<arg value="${app.name}"/>
		<arg value="${out.app.dir}"/>
	</exec>

	<!-- generates application.xml -->
	<property name="root.context" value=""/>
	<exec executable="bash" dir="." failonerror="true">
		<arg value="${bin.dir}/genappxml"/>
		<arg value="${app.name}"/>
		<arg value="${project.version}"/>
		<arg value="${out.app.dir}"/>
		<arg value="${root.context}"/>
	</exec>

	<!-- update applciation.xml into the i3app.jar -->
	<jar jarfile="${out.app.dir}/i3app.jar" update="true">
		<fileset dir="${out.app.dir}" includes="application.xml"/>
	</jar>

	<!-- build ear -->
	<mkdir dir="${dist.deploy.dir}"/>
	<ear earfile="${out.dir}/${ear.name}" manifest="${manifest.mf}"
	 appxml="${out.app.dir}/application.xml">
		<fileset dir="${out.app.dir}" includes="*.?ar"/>
		<fileset dir="${src.archive.dir}"
		 includes="META-INF/**"
		 excludes="META-INF/MANIFEST.MF, **/CVS/**"/>
	</ear>
</target>

<target name="build"
 depends="config.build, build.war, build.jar, build.ear, deploy">
</target>

<!-- ===== -->
<!-- CLEAN -->
<!-- ===== -->
<target name="clean.all" depends="config" if="clean.all.required">
	<delete quiet="true" includeEmptyDirs="true">
		<fileset dir="${dist.export.dir}" includes="**"/>
	</delete>
	<delete quiet="true" dir="${dist.lib.dir}"/>
	<delete quiet="true" dir="${dist.lib.ext.dir}"/>
</target>

<target name="clean.bin" depends="config" if="clean.bin.required">
	<delete quiet="true" dir="${bin.dir}"/>
</target>

<target name="clean" depends="clean.all, clean.bin">
	<delete quiet="true" dir="${out.dir}"/>
	<delete quiet="true" dir="${tmp.dir}"/>
	<delete quiet="true" dir="${codegen.dir}"/>
	<delete quiet="true">
		<fileset dir="${dist.lib.dir}" includes="${xar.name}"/>
		<fileset dir="${dist.deploy.dir}" includes="${xar.name}"/>
		<fileset dir="${jboss.lib.dir}" includes="${xar.name}"/>
		<fileset dir="${jboss.deploy1.dir}" includes="${xar.name}"/>
		<fileset dir="${tomcat.lib.dir}" includes="${xar.name}"/>
		<fileset dir="${tomcat.webapps.dir}" includes="${xar.name}"/>
	</delete>
</target>

<!-- ========= -->
<!-- UNIT TEST -->
<!-- ========= -->
<target name="deploy.test" depends="config" if="dist.test.dir.exist">
	<copy todir="${jboss.app.test.dir}" preservelastmodified="yes">
		<fileset dir="${dist.test.dir}" includes="**" excludes="**/CVS/**"/>
	</copy>
</target>
<target name="utest" depends="build, deploy.test">
	<property name="class.test" value="**/*Test.java"/><!-- test all if not defined -->

	<echo message="Test ${class.test}..."/>
	<junit fork="yes" haltonerror="${haltonerror}" dir="${out.dir}">
		<jvmarg value="-ea"/>
		<formatter type="plain" usefile="false"/>
		<classpath>
			<pathelement path="${java.class.path}"/>
			<pathelement location="${out.dir}"/>
		</classpath>
		<batchtest>
			<fileset dir="${src.dir}" includes="${class.test}"/>
		</batchtest>
	</junit>
</target>

<!-- ============= -->
<!-- MISCELLANEOUS -->
<!-- ============= -->
<target name="javadoc" depends="config.build">
	<javadoc packagenames="com.potix.*"
	 destdir="${working.javadoc.dir}"
	 author="true" package="true" version="true" use="true"
	 windowtitle="${project.name} ${project.version} API"
	 doctitle="${project.name} ${project.version} API"
	 additionalparam="-breakiterator -source ${source.version}"
	 bottom="Copyright &amp;copy; 2005-2006 Potix Corporation. All Rights Reserved.">
		<classpath>
			<pathelement path="${javadoc.class.path}"/>
		</classpath>
		<packageset dir="${src.dir}">
			<include name="com/potix/**"/>
		</packageset>
		<fileset dir="${codegen.dir}">
			<include name="com/potix/**"/>
			<exclude name="**/*$$*"/>
		</fileset>
	</javadoc>

	<delete quiet="true" dir="${dist.javadoc.dir}"/>
	<move todir="${dist.javadoc.dir}">
		<fileset dir="${working.javadoc.dir}" excludes="**/i3/util/Runtime.html"/>
	</move>
	<delete quiet="true" dir="${working.javadoc.dir}"/>

	<!-- copy xml and html to the destination since they might be referenced
		by package.html -->
	<copy todir="${dist.javadoc.dir}" preservelastmodified="yes">
		<fileset dir="${src.dir}"
		 includes="com/potix/**/*.xml, com/potix/**/*.html"
		 excludes="**/package.html" />
	</copy>
</target>
